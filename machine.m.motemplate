// _<$managedObjectClassName$>.m
// Created by Rob Rix on <$ date %Y-%m-%d $>
// Copyright 2009 Monochrome Industries

// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.m instead.

#import "_<$managedObjectClassName$>.h"

@implementation <$managedObjectClassName$>ID
@end

@implementation _<$managedObjectClassName$>

+(NSEntityDescription *)entityInManagedObjectContext:(NSManagedObjectContext *)_context {
	return [NSEntityDescription entityForName: @"<$name$>" inManagedObjectContext: _context];
}

+(id)insertInManagedObjectContext:(NSManagedObjectContext *)_context {
	return [NSEntityDescription insertNewObjectForEntityForName: @"<$name$>" inManagedObjectContext: _context];
}

-(<$managedObjectClassName$>ID *)objectID {
	return (<$managedObjectClassName$>ID *)super.objectID;
}

<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
@dynamic <$Attribute.name$>;

<$if Attribute.hasScalarAttributeType$>
-(<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value {
	NSNumber *result = self.<$Attribute.name$>;
	return result ? [result <$Attribute.scalarAttributeType.camelCaseString$>Value] : 0;
}

-(void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)_value {
	self.<$Attribute.name$> = [NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>: _value];
}
<$endif$>
<$endif$>
<$endforeach do$>

<$foreach Relationship noninheritedRelationships do$>
@dynamic <$Relationship.name$>;

<$if Relationship.isToMany$>
-(NSMutableSet *)mutable<$Relationship.name.initialCapitalString$> {
    return [self mutableSetValueForKey: @"<$Relationship.name$>"];
}
<$endif$>
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
+(id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)_context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)_<$Binding.name$><$endforeach do2$> {
	NSError *error = nil;
	id result = [self fetch<$FetchRequest.name.initialCapitalString$>: _context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>: _<$Binding.name$><$endforeach do2$> error: &error];
	if(error) {
		[NSApp presentError: error];
	}
	return result;
}

+(id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)_context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)_<$Binding.name$><$endforeach do2$> error:(NSError **)_error {
	NSError *error = nil;
	
	NSManagedObjectModel *model = _context.persistentStoreCoordinator.managedObjectModel;
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														_<$Binding.name$>, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName: @"<$FetchRequest.name$>" substitutionVariables: substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	id result = nil;
	NSArray *results = [_context executeFetchRequest: fetchRequest error: &error];
	
	if(!error) {
		switch(results.count) {
			case 0:
				//	Nothing found matching the fetch request. That's cool, though: we'll just return nil.
				break;
			case 1:
				result = [results objectAtIndex: 0];
				break;
			default:
				NSLog(@"WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %u found (substitutionVariables: %@, results: %@)",
					results.count,
					substitutionVariables,
					results);
		}
	}
	
	if(_error) *_error = error;
	return result;
}
<$else$>
+(NSArray *)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)_context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)_<$Binding.name$><$endforeach do2$> {
	NSError *error = nil;
	NSArray *result = [self fetch<$FetchRequest.name.initialCapitalString$>: _context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>: _<$Binding.name$><$endforeach do2$> error: &error];
	
	if(error) {
		[NSApp presentError: error];
	}
	return result;
}

+(NSArray *)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)_context <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)_<$Binding.name$><$endforeach do2$> error:(NSError **)_error {
	NSError *error = nil;
	
	NSManagedObjectModel *model = _context.persistentStoreCoordinator.managedObjectModel;
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName: @"<$FetchRequest.name$>"
													 substitutionVariables: [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														_<$Binding.name$>, @"<$Binding.name$>",
														<$endforeach do2$>
														nil]
													 ];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	NSArray *result = [_context executeFetchRequest: fetchRequest error: &error];
	if(_error) *_error = error;
	return result;
}
<$endif$>
<$endforeach do$>
@end
